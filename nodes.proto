syntax = "proto3";

package raft;

message Nodes {
    string address = 1;
}
message ServeClientArgs {
    string Request = 1;
  }
  
  message ServeClientReply {
    string Data = 1;
    string LeaderID = 2;
    bool Success = 3;
  }
// RequestVoteRequest represents a request for vote.
message VoteRequest {
    int32 term = 1;
    string candidate_id = 2;
}

// RequestVoteReply represents a response to a vote request.
message VoteReply {
    int32 term = 1;
    bool vote_granted = 2;
    int32 leader_lease_timeout = 3;
}

// RaftManagerServicer is the service definition for Raft.
service RaftManagerServicer {
    rpc Voting(VoteRequest) returns (VoteReply);
    rpc AppendEntries(EntriesRequest) returns (EntriesReply);
    rpc ServeClient (ServeClientArgs) returns (ServeClientReply);
}

// AppendEntriesRequest represents a request to append entries to the log.
message EntriesRequest {
    int32 term = 1;
    string leader_id = 2;
    int32 prev_log_index = 3;
    int32 prev_log_term = 4;
    int32 leader_commit = 5;
    int32 leader_lease_timeout = 6;
    repeated string entries = 7;
}

// AppendEntriesReply represents a response to append entries request.
message EntriesReply {
    int32 term = 1;
    bool success = 2;
}

